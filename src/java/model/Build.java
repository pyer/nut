package nut.model;

import nut.model.Goal;
import nut.model.ValidationException;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class Build 
implements java.io.Serializable
{
    //--------------------------/
    //- Class/Member Variables -/
    //--------------------------/

    /**
     * The directory where is nut.xml
     */
    private String baseDirectory = ".";

    /**
     * This element specifies a directory containing the source of the project.
     * The generated build system will compile the source
     * in this directory when the project is built.
     * The path given is relative to the project descriptor.
     */
    private String sourceDirectory = "src/java";

    /**
     * This element specifies a directory containing the resources of the project.
     * The path given is relative to the project descriptor.
     */
    private String resourceDirectory = "src/resources";

    /**
     * This element specifies a directory containing the unit test
     * source of the project.
     * The generated build system will compile this directory
     * when the project is being tested.
     * The path given is relative to the project descriptor.
     */
    private String testSourceDirectory = "test/java";

    /**
     * This element specifies a directory containing the unit test
     * resources of the project.
     * The path given is relative to the project descriptor.
     */
    private String testResourceDirectory = "test/resources";

    /**
     * The directory where all files generated by the build are
     * placed.
     */
    private String targetDirectory = "target";

    /**
     * The directory where compiled application classes are placed.
     */
    private String outputDirectory = "target/classes";

    /**
     * The directory where compiled test classes are placed.
     */
    private String testOutputDirectory = "target/test-classes";

    /**
     * The directory where test reports are placed.
     */
    private String testReportDirectory = "target/test-reports";

    /**
     * Field goals.
     */
    private List<Goal> goals;

    //-----------/
    //- Methods -/
    //-----------/

    public String getBaseDirectory()
    {
        return this.baseDirectory;
    }

    public void setBaseDirectory( String baseDirectory )
    {
        this.baseDirectory = baseDirectory;
    }

    public String getSourceDirectory()
    {
        return this.sourceDirectory;
    }

    public void setSourceDirectory( String sourceDirectory )
    {
        this.sourceDirectory = sourceDirectory;
    }

    public String getResourceDirectory()
    {
        return this.resourceDirectory;
    }

    public void setResourceDirectory( String resourceDirectory )
    {
        this.resourceDirectory = resourceDirectory;
    }

    public String getTestSourceDirectory()
    {
        return this.testSourceDirectory;
    }

    public void setTestSourceDirectory( String testSourceDirectory )
    {
        this.testSourceDirectory = testSourceDirectory;
    }

    public String getTestResourceDirectory()
    {
        return this.testResourceDirectory;
    }

    public void setTestResourceDirectory( String testResourceDirectory )
    {
        this.testResourceDirectory = testResourceDirectory;
    }

    public String getTargetDirectory()
    {
        return this.targetDirectory;
    }

    public void setTargetDirectory( String directory )
    {
        this.targetDirectory = directory;
    }

    public String getOutputDirectory()
    {
        return this.outputDirectory;
    }

    public void setOutputDirectory( String outputDirectory )
    {
        this.outputDirectory = outputDirectory;
    }

    public String getTestOutputDirectory()
    {
        return this.testOutputDirectory;
    }

    public void setTestOutputDirectory( String testOutputDirectory )
    {
        this.testOutputDirectory = testOutputDirectory;
    }

    public String getTestReportDirectory()
    {
        return this.testReportDirectory;
    }

    public void setTestReportDirectory( String testReportDirectory )
    {
        this.testReportDirectory = testReportDirectory;
    }

    public List<Goal> getGoals()
    {
        if ( this.goals == null )
        {
            this.goals = new ArrayList<Goal>();
        }
    
        return this.goals;
    }

    public void setGoals( List<Goal> goals )
    {
        this.goals = goals;
    }

    /**
     * validate method
     */
    public void validate()
        throws ValidationException
    {
        List goals = this.getGoals();
        for ( Iterator it = goals.iterator(); it.hasNext(); )
        {
          Goal goal = (Goal) it.next();
          goal.validate();
        }
    }
}
