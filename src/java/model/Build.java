package nut.model;

//---------------------------------/
//- Imported classes and packages -/
//---------------------------------/
import nut.model.Goal;

import java.util.List;
import java.util.ArrayList;

/**
 * The <code>&lt;build&gt;</code> element contains
 * informations required to build the project.
 * 
 */
public class Build 
implements java.io.Serializable
{


      //--------------------------/
     //- Class/Member Variables -/
    //--------------------------/

    /**
     * This element specifies a directory containing the source of
     * the project. The
     * generated build system will compile the source
     * in this directory when the project is
     * built. The path given is relative to the project
     * descriptor.
     */
    private String sourceDirectory = "src/java";

    /**
     * This element specifies a directory containing the script
     * sources of the
     * project. This directory is meant to be different
     * from the sourceDirectory, in that its
     * contents will be copied to the output directory
     * in most cases (since scripts are
     * interpreted rather than compiled).
     */
    private String scriptSourceDirectory = "src/script";

    /**
     * This element specifies a directory containing the unit test
     * source of the
     * project. The generated build system will compile
     * these directories when the project is
     * being tested. The path given is relative to the
     * project descriptor.
     */
    private String testSourceDirectory = "test/java";

    /**
     * The directory where compiled application classes are placed.
     */
    private String outputDirectory = "target/classes";

    /**
     * The directory where compiled test classes are placed.
     */
    private String testOutputDirectory = "target/test-classes";

    /**
     * The directory where test reports are placed.
     */
    private String testReportDirectory = "target/test-reports";

    /**
     * The directory where all files generated by the build are
     * placed.
     */
    private String directory = "target";

    /**
     * The directory where is nut.xml
     */
    private String baseDirectory = ".";

    private String modelEncoding = "UTF-8";

    /**
     * Field goals.
     */
    private List<Goal> goals;

    //-----------/
    //- Methods -/
    //-----------/

    /**
     * Get the directory where compiled application classes are
     * placed.
     * 
     * @return String
     */
    public String getOutputDirectory()
    {
        return this.outputDirectory;
    } //-- String getOutputDirectory() 

    /**
     * Get this element specifies a directory containing the source
     * of the project. The
     * generated build system will compile the source
     * in this directory when the project is
     * built. The path given is relative to the project
     * descriptor.
     * 
     * @return String
     */
    public String getSourceDirectory()
    {
        return this.sourceDirectory;
    } //-- String getSourceDirectory() 

    /**
     * Get the directory where compiled test classes are placed.
     * 
     * @return String
     */
    public String getTestOutputDirectory()
    {
        return this.testOutputDirectory;
    } //-- String getTestOutputDirectory() 

    /**
    /**
     * Get the directory where test reports are placed.
     * 
     * @return String
     */
    public String getTestReportDirectory()
    {
        return this.testReportDirectory;
    } //-- String getTestReportDirectory() 

    /**
     * Get this element specifies a directory containing the unit
     * test source of the
     * project. The generated build system will compile
     * these directories when the project is
     * being tested. The path given is relative to the
     * project descriptor.
     * 
     * @return String
     */
    public String getTestSourceDirectory()
    {
        return this.testSourceDirectory;
    } //-- String getTestSourceDirectory() 

    /**
     * Set the directory where compiled application classes are
     * placed.
     * 
     * @param outputDirectory
     */
    public void setOutputDirectory( String outputDirectory )
    {
        this.outputDirectory = outputDirectory;
    } //-- void setOutputDirectory( String ) 

    /**
     * Set this element specifies a directory containing the source
     * of the project. The
     * generated build system will compile the source
     * in this directory when the project is
     * built. The path given is relative to the project
     * descriptor.
     * 
     * @param sourceDirectory
     */
    public void setSourceDirectory( String sourceDirectory )
    {
        this.sourceDirectory = sourceDirectory;
    } //-- void setSourceDirectory( String ) 

    /**
     * Set the directory where compiled test classes are placed.
     * 
     * @param testOutputDirectory
     */
    public void setTestOutputDirectory( String testOutputDirectory )
    {
        this.testOutputDirectory = testOutputDirectory;
    } //-- void setTestOutputDirectory( String ) 

    /**
     * Set the directory where test reports are placed.
     * 
     * @param testReportDirectory
     */
    public void setTestReportDirectory( String testReportDirectory )
    {
        this.testReportDirectory = testReportDirectory;
    } //-- void setTestReportDirectory( String ) 

    /**
     * Set this element specifies a directory containing the unit
     * test source of the
     * project. The generated build system will compile
     * these directories when the project is
     * being tested. The path given is relative to the
     * project descriptor.
     * 
     * @param testSourceDirectory
     */
    public void setTestSourceDirectory( String testSourceDirectory )
    {
        this.testSourceDirectory = testSourceDirectory;
    } //-- void setTestSourceDirectory( String ) 

    /**
     * Get the directory where all files generated by the build are
     * placed.
     * 
     * @return String
     */
    public String getDirectory()
    {
        return this.directory;
    } //-- String getDirectory() 

    /**
     * Set the directory where all files generated by the build are
     * placed.
     * 
     * @param directory
     */
    public void setDirectory( String directory )
    {
        this.directory = directory;
    } //-- void setDirectory( String ) 

    /**
     * Get the baseDirectory where is nut.xml
     * 
     * @return String
     */
    public String getBaseDirectory()
    {
        return this.baseDirectory;
    } //-- String getBaseDirectory() 

    /**
     * Set the baseDirectory where is nut.xml
     * 
     * @param baseDirectory
     */
    public void setBaseDirectory( String baseDirectory )
    {
        this.baseDirectory = baseDirectory;
    } //-- void setBaseDirectory( String ) 


    /**
     * @return the current encoding used when reading/writing this model.
     */
    public String getModelEncoding()
    {
        return modelEncoding;
    }

    /**
     * Set an encoding used for reading/writing the model.
     *
     * @param modelEncoding the encoding used when reading/writing the model.
     */
    public void setModelEncoding( String modelEncoding )
    {
        this.modelEncoding = modelEncoding;
    }

    /**
     * Method getGoals.
     * 
     * @return java.util.List
     */
    public List<Goal> getGoals()
    {
        if ( this.goals == null )
        {
            this.goals = new ArrayList<Goal>();
        }
    
        return this.goals;
    } //-- java.util.List getGoals() 

    public List<String> getGoalsNames()
    {
      List<String> goalsNames = new ArrayList<String>();
      for ( Integer i=0; i<this.goals.size(); i++ ) {
        goalsNames.add(i, this.goals.get(i).getName());
      }
      return goalsNames;
    }

    public void setGoals( List<Goal> goals )
    {
        this.goals = goals;
    } //-- void setGoals( java.util.List ) 

}
